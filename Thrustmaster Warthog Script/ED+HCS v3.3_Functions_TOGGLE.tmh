//	Copyright (C) 2018 Thomas Duployez (CMDR Touille)
//	V3.3.01b	2018/12
//	Distributed freely under the MIT License.
//	
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//	
//	The above copyright notice and this permission notice shall be included in all
//	copies or substantial portions of the Software.
//	
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//	SOFTWARE.
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	TOGGLE FUNCTIONS																																			//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	//TOGGLE: Menu and LED OFF on Idle (Check PERSONAL SETTINGS in Settings File)
	int initToggleIDLEonThrottle(){
		if(!Joystick[P_S3]){	//Reset On The FLY P_S3 + SWITCH
			if(Throttle[IDLELON]){
				sIDLE = 1;
				initBACKLIGHT(Throttle_BL, ThrottleLightOnIDLE);
				if(USEMFD > 0)initBACKLIGHT(RMFD_BL, RMFDLightOnIDLE);
				if(USEMFD > 1)initBACKLIGHT(LMFD_BL, LMFDLightOnIDLE);				
			}
			else{
				sIDLE = 0;
				initBACKLIGHT(Throttle_BL, vThrottleLightBackup);
				if(USEMFD > 0)initBACKLIGHT(RMFD_BL, vRMFDLightBackup);
				if(USEMFD > 1)initBACKLIGHT(LMFD_BL, vLMFDLightBackup);
			}
			if(GameMenuOnIDLE) initGameMenu();	//If GameMenu on IDLE Option is 1, Launch Game Menu
			initLED(IDLEOnThrottle_LED, sIDLE);
			if(DebugMode | DebugMMode) printf("IDLE On Throttle	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", sIDLE);
		}
	}
	
	//TOGGLE: StopFire Retract Hardpoints
	int initToggleStopFireRetractHardpoints(){
		StopFireRetractHardpoints=!StopFireRetractHardpoints;
		initLED(StopFireRetractHardpoints_LED, StopFireRetractHardpoints);
		if(DebugMode | DebugMMode) printf("Retract HP on Fire	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", StopFireRetractHardpoints);
	}
	
	//TOGGLE: SecureRetract
	int initToggleSecureRetract(){
		SecureRetract=!SecureRetract;
		initLED(SecureRetract_LED, SecureRetract);
		if(DebugMode | DebugMMode) printf("SecureRetract		[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", SecureRetract);
	}	

	//TOGGLE: Silent Runing OFF on Fire
	int initToggleSilentRuningOFFonFire(){
		SilentRuningOFFonFire=!SilentRuningOFFonFire;
		initLED(SilentRuningOFFonFire_LED, SilentRuningOFFonFire);
		if(DebugMode | DebugMMode) printf("Silent Runing On Fire	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", SilentRuningOFFonFire);
	}

	//TOGGLE: HeatSink on Silent Runing
	int initToggleHeatSinkonSilentRuning(){
		HeatSinkonSilentRuning=!HeatSinkonSilentRuning;
		initLED(HeatSinkOnSilentRuning_LED, HeatSinkonSilentRuning);
		if(DebugMode | DebugMMode) printf("Heat Sink on Silent Runing	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", HeatSinkonSilentRuning);
	}	
	
	//TOGGLE: Optimal PIP Mode
	int initToggleOptimalPIPMode(){
		OptimalPIPMode=!OptimalPIPMode;
		initLED(OptimalPIPMode_LED, OptimalPIPMode);
		if(DebugMode | DebugMMode) printf("Optimal PIPMode	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", OptimalPIPMode);
	}
	
	//TOGGLE: Supecruise On Throttle Mode
	int initToggleSuperCruiseMode(){
		SupecruiseOnThrottle=!SupecruiseOnThrottle;
		//If No Hardware AfetrBurner Detent & SupecruiseOnThrottle is Enable : SuperCruise if Throttle > 99% axis
		if     (SupecruiseOnThrottle & !AfterburnerDetent) KeyAxis(&Throttle, THR_RIGHT, 0, AXMAP1(LIST(0,99,100), EXEC("initSecureRectract();ActKey(KEYON+PULSE+Supercruise);"), 0));
		//If Hardware AfetrBurner Detent  & SupecruiseOnThrottle is Enable : SuperCruise if Throttle > 80% axis
		else if(SupecruiseOnThrottle &  AfterburnerDetent) KeyAxis(&Throttle, THR_RIGHT, 0, AXMAP1(LIST(0,80,100), EXEC("initSecureRectract();ActKey(KEYON+PULSE+Supercruise);"), 0));
		//If SupecruiseOnThrottle is Disable : Do nothing on axis
		else                                               KeyAxis(&Throttle, THR_RIGHT, 0, AXMAP1(LIST(0), 0, 0));
		initLED(SupecruiseOnThrottle_LED, SupecruiseOnThrottle);
		if(DebugMode | DebugMMode) printf("Supecruise On Throttle	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", SupecruiseOnThrottle);
	}
	
	//TOGGLE: Combined Fire	
	int initToggleCombinedFire(){
		sCombinedFire=!sCombinedFire;
		if(sCombinedFire){	//Combine Primary & Secondary Fire on TG2
			MapKey (&Joystick, TG2, EXEC("initFire();"));
			MapKeyR(&Joystick, TG2, EXEC("initFire();"));
		}
		else{	//Separate Primary & Secondary Fire Press TG2 do Nothing
			MapKey (&Joystick, TG2, 0);
			MapKeyR(&Joystick, TG2, 0);
		}
		initLED(CombinedFire_LED, sCombinedFire);
		if(DebugMode | DebugMMode) printf("Primary & Secondary Fire	[%d]	[COMBINED:[1] SEPARATE[0]]\x0a", sCombinedFire);
	}
	
//---------------------Voice------------------------------------------------------------------------------------------------------------------------------------//

	//TOGGLE: Voice Attack Mic
	int initToggleVoiceAttackMic(){
		if(VoiceAttack){
			sVoiceAttack=!sVoiceAttack;
			ActKey(KEYON+PULSE+ToggleVoiceAttackMic);
			initLED(VA_LED, sVoiceAttack);
			if(DebugMode | DebugMMode) printf("Voice Attack Mic	[%d]	[MUTE:[1] UNMUTE:[0]]\x0a", sVoiceAttack);
		}
	}

	//TOGGLE: PTT/PTP
	int initTogglePTTPTP(){
		sPTTMode=!sPTTMode;
		initLED(PTTMode_LED, sPTTMode);
		if(DebugMode | DebugMMode) printf("PTTMode Change	[%d]	[HOLD:[0] TOGGLE:[1]]\x0a", sPTTMode);
	}
	
	//TOGGLE: External/Internal Voice
	int initTogglePTTMode(){
		sPTTState=!sPTTState;
		initLED(PTT_LED, sPTTState);
		if(DebugMode | DebugMMode) printf("Mic Change		[%d]	[External:[0]Internal:[1]]\x0a", sPTTState);
	}	
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	TOGGLE GAMES FUNCTIONS																																		//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

		//TOGGLE: Landing Gear
	int initToggleLandingGear(){
		if(Throttle[T2_EACON] & !s_LandingGearDown | !Throttle[T2_EACON] & s_LandingGearDown | vSecureEscapeFight){
			ActKey(KEYON+PULSE+LandingGear);
		}
	}

		//TOGGLE: Cargo Scoop	
	int initToggleCargoScoop(){
		if(Throttle[T2_RDRNRM] & !s_CargoScoopDeployed | !Throttle[T2_RDRNRM] & s_CargoScoopDeployed | vSecureEscapeFight){
			ActKey(KEYON+PULSE+CargoScoop);
		}
	}

		//TOGGLE: Light	
	int initToggleLights(){
		if(Throttle[T2_EFRNORM] & !s_LightsOn | !Throttle[T2_EFRNORM] & s_LightsOn){
			ActKey(KEYON+PULSE+ShipLights); //Switch position is UP : Light Is ON
		}
	}
	
	//TOGGLE: HUD Mode
	int initToggleHUDMode(){
		if(Throttle[T2_EFLNORM] & !s_HUDAnalysis | !Throttle[T2_EFLNORM] & s_HUDAnalysis){
			ActKey(KEYON+PULSE+HUDMode);
		}
	}	
		//TOGGLE: HardPoints	
	int initToggleHardpoints(){
		if(!Joystick[P_S3] | (Joystick[P_S3] & Joystick[TG1]) | (Joystick[P_S3] & Joystick[P_S2])){ // No [P_S3] Pressed OR automatic fire with [P_S3]?
			ActKey(KEYON+PULSE+DeployHardpoints);
		} else if(Joystick[P_S3] & (!Joystick[TG1] | !Joystick[P_S2])){	//Reset The Flag On The FLY P_S3 + SWITCH
			if(DebugMode | DebugMMode) printf("Reset On The Fly with P_S3 : Hardpoints\x0a");
		}
	}

		//TOGGLE: Silent Runing
	int initToggleSilentRuning(){
		if(Joystick[H3D] | Joystick[TG1] | Joystick[P_S2] | vSLonFire | vSLonEscapeFight | vSLonGameMenu | vSLonCamera){
			if(SilentRuningGameMode){	//Silent Runing [TOGGLE] Mode Ingame
				if(HeatSinkonSilentRuning) ActKey(KEYON+PULSE+mHeatSinkonSilentRuning);	//Call The Heat Sink on Silent Running Macro
				else ActKey(KEYON+PULSE+SilentRunning);
			} 
			else ActKey(KEYON+DOWN+SilentRunning);	//Silent Runing [HOLD] Mode Engage
		} else {
			if(!SilentRuningGameMode & s_SilentRunning) ActKey(KEYON+UP+SilentRunning);	//Silent Runing [HOLD] Mode DisEngage
		}
	}	

		//TOGGLE: Enhanced Joystick Curves tailored for Flight Assist Off ONLY IF Rotational Correction is Enable
	int initToggleEnhancedFAOFF(){
		if (!s_Supercruise){
			if(Joystick[P_S4]){
				if(FlightAssistGameMode){	//FA [TOGGLE] Mode Ingame
					vFA=!vFA;
					if(sRCorrection){
						if(vFA){	//FA [TOGGLE] Mode First Pulse Engage
							vJoystickCurveProfileBackup = vJoystickCurveProfile;	//Backup Current Curves
							vJoystickCurveProfile = FAOffCurve;	//Apply the Setting FAOffCurve (Settings)
							if(vJoystickCurveProfileBackup != FAOffCurve){	//Only if Previous Curve is != from FAOffCurrve preset
								initJoystickCurves();
								if(DebugMode | DebugMMode) printf("Curve Profile Adjusted\x0a");
							}
						}
						else{	//FA [TOGGLE] Mode Second Pulse DisEngage	
							vJoystickCurveProfile = vJoystickCurveProfileBackup;	//Restore Previous Curves
							if(vJoystickCurveProfileBackup != FAOffCurve){	//Only if Previous Curve is != from FAOffCurrve preset
								initJoystickCurves();
								if(DebugMode | DebugMMode) printf("Curve Profile Return to Default\x0a");
							}
						}
					}
					ActKey(KEYON+PULSE+FlightAssist);
				}
				else {	//FA [HOLD] Mode Ingame Engage
					if(sRCorrection){
						vJoystickCurveProfileBackup = vJoystickCurveProfile;	//Backup Current Curves
						vJoystickCurveProfile = FAOffCurve;	//Apply the Setting FAOffCurve (Settings)
						if(vJoystickCurveProfileBackup != FAOffCurve){	//Only if Previous Curve is != from FAOffCurrve preset
							initJoystickCurves();
							if(DebugMode | DebugMMode) printf("Curve Profile Adjusted\x0a");
						}
					}
					ActKey(KEYON+DOWN+FlightAssist);
				}
			}
			else if (!s_Supercruise){
				if(!FlightAssistGameMode & s_FlightAssistOff){	//FA [HOLD] Mode Ingame DisEngage
					if(sRCorrection){
						vJoystickCurveProfile = vJoystickCurveProfileBackup;	//Restore Previous Curves
						if(vJoystickCurveProfileBackup != FAOffCurve){	//Only if Previous Curve is != from FAOffCurrve preset
							initJoystickCurves();
							if(DebugMode | DebugMMode) printf("Curve Profile Return to Default\x0a");
						}
					}
					ActKey(KEYON+UP+FlightAssist);
				}
			}
		}
	}
	
	//TOGGLE: Reverse Throttle
	int initToggleReverseThrottle(){
		if(Throttle[P_LTB]){
			sRT=!sRT;
			if(RFlightThrootleGameMode) ActKey(KEYON+PULSE+ReverseThrottle);	//TOGGLE
			else ActKey(KEYON+DOWN+ReverseThrottle);	//HOLD Key Down
		}
		else{	//HOLD Key Up
			if(!RFlightThrootleGameMode & sRT){
				sRT=!sRT;
				ActKey(KEYON+UP+ReverseThrottle);
			}
		}
		initLED(ReverseThrottle_LED, sRT);
		if(DebugMode) printf("Reverse Throttle	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", sRT );
	}
	
	//TOGGLE: Rotational Correction
	int initToggleRotationalCorrection(){
		sRCorrection=!sRCorrection;
		ActKey(KEYON+PULSE+RotationalCorrection);
		initLED(RCorrection_LED, sRCorrection);
		if(DebugMode) printf("Rotational Correction	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", sRCorrection);
	}

	//TOGGLE: External Camera
	int initToggleCamera(){
		sCameraMode=!sCameraMode;
		if(s_SilentRunning){
			vSLonCamera=!vSLonCamera;
			initToggleSilentRuning();	//If Silent Runing is Engaged, Disengade it
			vSLonCamera=!vSLonCamera;
		}
		if(sCameraMode){	//Open The Camera Mode
			if(OptimalPIPMode){
				initBackupPIPPower(OptimalPIPCCBackup);	//Backup Actual PIP Mode OptimalPIPCCBackup (5)
				initPIPPower(SYS, ENG);	//4 SYS 2 ENG (3)
			}
			DeferCall(1000, &ActKey, KEYON+PULSE+mClassifiedCamera);	//Call The Camera Mode Macro
		}
		else{	//Close The Camera Mode
			ActKey(KEYON+PULSE+ClassifiedCamera);	//Push The Camera Mode Key
			if(OptimalPIPMode) DeferCall(1000, &ActKey, KEYON+PULSE+EXEC("initRestorePIPPower(vOptimalPIPCCBackup);"));	//Restore Previous PIP Mode If vOptimalPIPCCBackup != 4 SYS 2 ENG (3)
		}
		initLED(Camera_LED, sCameraMode);
		if(DebugMode) printf("Classified Camera	[%d]	[ON:[1] OFF:[0]]\x0a", sCameraMode);
	}

	//TOGGLE: Head Look
	int initToogleHeadLook(){
		if(!HMD & !TrackIR){
			if(Throttle[P_SC]){
				sHeadLook=!sHeadLook;
				if(HeadLookGameMode){	//HeadLook [TOGGLE] Mode Ingame
					ActKey(KEYON+PULSE+HeadLook);
					if(DebugMode) printf("Head Look	[TOOGLE]	[%d]	[ON:[1] OFF:[0]]\x0a", sHeadLook);
				}
				else ActKey(KEYON+DOWN+HeadLook);	//HeadLook [HOLD] Mode Ingame Engage
			}
			else{
				if(!HeadLookGameMode & sHeadLook){	//HeadLook [HOLD] Mode Ingame DisEngage
					sHeadLook=!sHeadLook;
					ActKey(KEYON+UP+HeadLook);
				}
			}
			initLED(HeadLook_LED, sHeadLook);
			if(DebugMode & !HeadLookGameMode) printf("Head Look	[HOLD]	[%d]	[ON:[1] OFF:[0]]\x0a", sHeadLook);
		}
	}

	//TOGGLE: GameMenu
	int initToggleGameMenu(){
		sGameMenu=!sGameMenu;
		if(s_SilentRunning){
			vSLonGameMenu=!vSLonGameMenu;
			initToggleSilentRuning();	//If Silent Runing is Engaged, Disengade it
			vSLonGameMenu=!vSLonGameMenu;
		}
		if(sGameMenu){	//Open The Game Menu
			if(OptimalPIPMode){
				initBackupPIPPower(OptimalPIPGMBackup);	//Backup Actual PIP Mode OptimalPIPGMBackup (4)
				initPIPPower(SYS, ENG);	//4 SYS 2 ENG (3)
			}
			ActKey(KEYON+PULSE+SetSpeed0);
		}
		else{	//Close The Game Menu
			if(OptimalPIPMode) DeferCall(6000, &ActKey, KEYON+PULSE+EXEC("initRestorePIPPower(vOptimalPIPGMBackup);"));	//Restore Previous PIP Mode If vOptimalPIPGMBackup != 4 SYS 2 ENG (3)
		}		
		DeferCall(3000, &ActKey, KEYON+PULSE+GameMenu);
		initLED(GameMenu_LED, sGameMenu);
		if(DebugMode) printf("Game Menu	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", sGameMenu);
	}