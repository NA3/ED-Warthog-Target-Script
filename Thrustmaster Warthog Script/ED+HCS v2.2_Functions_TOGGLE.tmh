//	Copyright (C) 2017 Thomas Duployez (CMDR Touille)
//	V2.2.03.2b	2017/01
//	Distributed freely under the MIT License.
//	
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//	
//	The above copyright notice and this permission notice shall be included in all
//	copies or substantial portions of the Software.
//	
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//	SOFTWARE.
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	TOGGLE FUNCTIONS																																			//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	//TOGGLE: Menu and LED OFF on Idle (Check PERSONAL SETTINGS in Settings File)
	int initToggleIDLEonThrottle(){
		if(!Joystick[S3]){	//Reset On The FLY S3 + SWITCH
			if(Throttle[IDLELON]) sIDLE = 1;	//Throttle position is IDLE State =1
			else sIDLE = 0;	//Throttle position is !IDLE State =0
			if(GameMenuOnIDLE)initGameMenu();	//If GameMenu on IDLE Option is 1, Launch Game Menu
			if(sIDLE){
				ActKey(PULSE+KEYON+LED(&Throttle, LED_INTENSITY, ThrottleLightOnIDLE));
			}else{
				ActKey(PULSE+KEYON+LED(&Throttle, LED_INTENSITY, vThrottleLightBackup));
			}
			if(ThrottleLightOnIDLE!=0){	//Put The LED ON Only if Throttle Backlight on IDLE is ON (If Off We don't see LED :) )
				initLED(ToggleIDLEonThrottleLED, sExplorerMode);
			}
			if(DebugMode) printf("IDLE On Throttle	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", sIDLE);
		}
	}
	
	//TOGGLE: Explorer Mode
	int initToggleExplorerMode(){
		if(!Joystick[S3]){
			if(Throttle[EFLNORM]) sExplorerMode = 1;	//Switch position is UP : Explorer Mode Is ON
			else sExplorerMode =0;	//Switch position is DOWN : Explorer Mode Is OFF
			initLED(ToogleExplorerModeLED, sExplorerMode);
			if(DebugMode) printf("Explorer Mode	[%d]	[ON:[1] OFF:[0]]\x0a", sExplorerMode);
		}
	}	
	
	//TOGGLE: StopFire When Retract Hardpoints
	int initToggleStopFireRetractHardpoints(){
		StopFireRetractHardpoints=!StopFireRetractHardpoints;
		initLED(ToggleStopFireRetractHardpointsLED, StopFireRetractHardpoints);
		if(DebugMode) printf("Retract HP on Fire	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", StopFireRetractHardpoints);
	}
	
	//TOGGLE: SecureRetract
	int initToggleSecureRetract(){
		SecureRetract=!SecureRetract;
		initLED(ToggleSecureRetractLED, SecureRetract);
		if(DebugMode) printf("SecureRetract		[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", SecureRetract);
	}	

	//TOGGLE: Silent Runing OFF on Fire
	int initToggleSilentRuningOFFonFire(){
		SilentRuningOFFonFire=!SilentRuningOFFonFire;
		initLED(ToggleSilentRuningonFireLED, SilentRuningOFFonFire);
		if(DebugMode) printf("Silent Runing On Fire	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", SilentRuningOFFonFire);
	}

	//TOGGLE: HeatSink on Silent Runing
	int initToggleHeatSinkonSilentRuning(){
		HeatSinkonSilentRuning=!HeatSinkonSilentRuning;
		initLED(ToggleHeatSinkonSilentRuningLED, HeatSinkonSilentRuning);
		if(DebugMode) printf("Heat Sink on Silent Runing	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", HeatSinkonSilentRuning);
	}	
	
	//TOGGLE: Optimal PIP Mode
	int initToggleOptimalPIPMode(){
		OptimalPIPMode=!OptimalPIPMode;
		initLED(ToggleOptimalPIPModeLED, OptimalPIPMode);
		if(DebugMode) printf("Optimal PIPMode	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", OptimalPIPMode);
	}
	
	//TOGGLE: Supecruise On Throttle Mode
	int initToggleSuperCruiseMode(){
		SupecruiseOnThrottle=!SupecruiseOnThrottle;
		initLED(ToggleSuperCruiseModeLED, SupecruiseOnThrottle);
		if(DebugMode) printf("Supecruise On Throttle	[%d]	[ON:[1] OFF:[0]]\x0a", SupecruiseOnThrottle);
	}
	
	//TOGGLE: Combined Fire	
	int initToggleCombinedFire(){
		sCombinedFire=!sCombinedFire;
		if(sCombinedFire){
			MapKey(&Joystick, TG2, CHAIN(PrimaryFire, SecondaryFire));	//Combine Primary & Secondary Fire on TG2
		}else{
			MapKey(&Joystick, TG2, 0);	//Separate Primary & Secondary Fire Press TG2 do Nothing
		}
		initLED(ToggleCombinedFireLED, sCombinedFire);
		if(DebugMode) printf("Primary & Secondary Fire	[%d]	[COMBINED:[1] SEPARATE[0]]\x0a", sCombinedFire);
	}
	
//---------------------Voice------------------------------------------------------------------------------------------------------------------------------------//

	//TOGGLE: Voice Attack Mic
	int initToggleVoiceAttackMic(){
		if(VoiceAttack){
			sVoiceAttack=!sVoiceAttack;
			ActKey(KEYON+PULSE+ToggleVoiceAttackMic);
			initLED(ToggleVALED, sVoiceAttack);
			if(DebugMode) printf("Voice Attack Mic	[%d]	[MUTE:[1] UNMUTE:[0]]\x0a", sVoiceAttack);
		}
	}

	//TOGGLE: PTT/PTP
	int initTogglePTTPTP(){
		sPTTMode=!sPTTMode;
		initLED(TogglePTTModeLED, sPTTMode);
		if(DebugMode) printf("PTTMode Change	[%d]	[HOLD:[0] TOGGLE:[1]]\x0a", sPTTMode);
	}
	
	//TOGGLE: External/Internal Voice
	int initTogglePTTMode(){
		sPTTState=!sPTTState;
		initLED(TogglePTTLED, sPTTState);
		if(DebugMode) printf("Mic Change		[%d]	[External:[0]Internal:[1]]\x0a", sPTTState);
	}	
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	TOGGLE GAMES FUNCTIONS																																		//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	//TOGGLE: Landing Gear
	int initToggleLandingGear(){
		if(!Joystick[S3]){
			if(vSecureEscapeFight){	//If initSecureRectract() initialise This
				sGears=!sGears;
				if(DebugMode)printf("Landing Gear SecureEscapeFight [%d]\x0a", vSecureEscapeFight);
			}else{	//Or Change the flag status with the switch position
				if(Throttle[EACON]) sGears = 1;	//Switch position is UP : Landing Gear Is Deployed
				else sGears = 0;	//Switch position is DOWN : Landing Gear Is Retracted
			}
			if(sGears & !vLG){	//vLG is there if initSecureRectract() initialise This
				vLG=!vLG;	//Reset On The FLY : Just switch
				ActKey(KEYON+PULSE+LandingGear);			
			}else if (!sGears & vLG){	//vLG is there if initSecureRectract() initialise This
				vLG=!vLG;	//Reset On The FLY : Just switch
				ActKey(KEYON+PULSE+LandingGear);
			}else{
				if(DebugMode) printf("Landing Gear Reset On The Fly\x0a");
			}
			initLED(ToggleLandingGearLED, sGears);
		}else{	//Reset The Flag On The FLY S3 + SWITCH
			vLG=!vLG;
		}
		if(DebugMode)printf("Landing Gear	[%d]	[DEPLOYED:[1] RETRACTED:[0]]\x0a", sGears);
	}
	
	//TOGGLE: Cargo Scoop	
	int initToggleCargoScoop(){
		if(!Joystick[S3]){
			if(vSecureEscapeFight){	//If initSecureRectract() initialise This
				sCargo=!sCargo;
				if(DebugMode)printf("Cargo Scoop SecureEscapeFight [%d]\x0a", vSecureEscapeFight);
			}else{	//Or Change the flag status with the switch position
				if(Throttle[RDRNRM]) sCargo = 1;	//Switch position is UP : Cargo Scoop Is Deployed
				else sCargo = 0;	//Switch position is DOWN : Cargo Scoop Is Retracted
			}
			if(sCargo & !vCS){	//vCS is there if initSecureRectract() initialise This
				vCS=!vCS;	//Reset On The FLY : Just switch
				ActKey(KEYON+PULSE+CargoScoop);				
			}else if(!sCargo & vCS){	//vCS is there if initSecureRectract() initialise This
				vCS=!vCS;	//Reset On The FLY : Just switch
				ActKey(KEYON+PULSE+CargoScoop);
			}else{
				if(DebugMode) printf("Cargo Scoop Reset On The Fly\x0a");
			}
			initLED(ToggleCargoScoopLED, sCargo);
		}else{	//Reset The Flag On The FLY S3 + SWITCH
			vCS=!vCS;
		}
		if(DebugMode)printf("Cargo Scoop	[%d]	[DEPLOYED:[1] RETRACTED:[0]]\x0a", sCargo);
	}

	//TOGGLE: Light	
	int initToggleLights(){
		if(!Joystick[S3]){
			if(Throttle[EFRNORM]) sLights = 1;	//Switch position is UP : Light Is ON
			else sLights = 0;	//Switch position is DOWN : Light Is OFF
			ActKey(KEYON+PULSE+ShipLights);
			initLED(ToggleLightsLED, sLights);
		}
		if(DebugMode) printf("Light		[%d]	[ON:[1] OFF:[0]]\x0a", sLights);
	}
	
	//TOGGLE: HardPoints	
	int initToggleHardpoints(){
		if(!Joystick[S3]){
			if(vSecureEscapeFight){	//If initSecureRectract() initialise This Just Display Msg (Hardpoint is Mapped on Button : No Position)
				if(DebugMode)printf("HardPoints SecureEscapeFight [%d]\x0a", vSecureEscapeFight);
			}
			sHardPoints=!sHardPoints;
			ActKey(KEYON+PULSE+DeployHardpoints);
			if(sHardPoints){
				if(OptimalPIPMode & !sExplorerMode){
					vOptimalPIPHPBackup = vOptimalPIP;	//Backup Actual PIP Mode
					initPIPPower(WEP,SYS);	//4 WEP 2 SYS (6)
				}
			}else{
				if(OptimalPIPMode & !sExplorerMode){
					initRestorePIPPower(vOptimalPIPHPBackup);	//Restore Previous PIP Mode
				}
			}
			initLED(ToggleHardpointsLED, sHardPoints);
		}else{	//Reset The Flag On The FLY S3 + SWITCH
			sHardPoints=!sHardPoints;
		}
		if(DebugMode) printf("HardPoints	[%d]	[DEPLOYED:[1] RETRACTED:[0]]\x0a", sHardPoints);
	}

	//TOGGLE: Silent Runing
	int initToggleSilentRuning(){
		if(Joystick[H3D] | Joystick[TG1] | Joystick[S2] | vSLonFire | vSLonEscapeFight | vSLonGameMenu | vSLonCamera){
			sSilentRuning=!sSilentRuning;
			if(SilentRuningGameMode){	//Silent Runing [TOGGLE] Mode Ingame
				if(HeatSinkonSilentRuning){
					ActKey(KEYON+PULSE+mHeatSinkonSilentRuning);	//Call The Heat Sink on Silent Running Macro
				}else{
					ActKey(KEYON+PULSE+SilentRunning);
				}
				if(DebugMode) printf("Silent Runing [TOGGLE]	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", sSilentRuning);
			}else{	//Silent Runing [HOLD] Mode Engage
				ActKey(KEYON+DOWN+SilentRunning);
			}
		}else{
			if(!SilentRuningGameMode & sSilentRuning){		//Silent Runing [HOLD] Mode DisEngage
				sSilentRuning=!sSilentRuning;
				ActKey(KEYON+UP+SilentRunning);
			}
		}
		initLED(ToggleSilentRuningLED, sSilentRuning);
		if(DebugMode & !SilentRuningGameMode) printf("Silent Runing [HOLD]	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", sSilentRuning);
	}	

	//TOGGLE: Enhanced Joystick Curves tailored for Flight Assist Off ONLY IF Rotational Correction is Enable
	int initToggleEnhancedFAOFF(){
		if(Joystick[S4]){
			sFlightAssist=!sFlightAssist;
			if(FlightAssistGameMode){	//FA [TOGGLE] Mode Ingame
				vFA=!vFA;
				if(sRCorrection){
					if(vFA){	//FA [TOGGLE] Mode First Pulse Engage
						vJoystickCurveProfileBackup = vJoystickCurveProfile;	//Backup Current Curves
						vJoystickCurveProfile = FAOffCurve;	//Apply the Setting FAOffCurve (Settings)
						if(vJoystickCurveProfileBackup != FAOffCurve){	//Only if Previous Curve is != from FAOffCurrve preset
							initJoystickCurves();
							if(DebugMode) printf("Curve Profile Adjusted\x0a");
						}
					}else{	//FA [TOGGLE] Mode Second Pulse DisEngage	
						vJoystickCurveProfile = vJoystickCurveProfileBackup;	//Restore Previous Curves
						if(vJoystickCurveProfileBackup != FAOffCurve){	//Only if Previous Curve is != from FAOffCurrve preset
							initJoystickCurves();
							if(DebugMode) printf("Curve Profile Return to Default\x0a");
						}
					}
				}
				ActKey(KEYON+PULSE+FlightAssist);
				if(DebugMode) printf("EnhancedFAOFF [TOGGLE]	[%d]	[ENABLE:[1] DISABLE:[0]]	Rcorrection	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", sFlightAssist, sRCorrection);
			}else{	//FA [HOLD] Mode Ingame Engage
				if(sRCorrection){
					vJoystickCurveProfileBackup = vJoystickCurveProfile;	//Backup Current Curves
					vJoystickCurveProfile = FAOffCurve;	//Apply the Setting FAOffCurve (Settings)
					if(vJoystickCurveProfileBackup != FAOffCurve){	//Only if Previous Curve is != from FAOffCurrve preset
						initJoystickCurves();
						if(DebugMode) printf("Curve Profile Adjusted\x0a");
					}
				}
				ActKey(KEYON+DOWN+FlightAssist);
			}
		}else{
			if(!FlightAssistGameMode & sFlightAssist){	//FA [HOLD] Mode Ingame DisEngage
				sFlightAssist=!sFlightAssist;
				if(sRCorrection){
					vJoystickCurveProfile = vJoystickCurveProfileBackup;	//Restore Previous Curves
					if(vJoystickCurveProfileBackup != FAOffCurve){	//Only if Previous Curve is != from FAOffCurrve preset
						initJoystickCurves();
						if(DebugMode) printf("Curve Profile Return to Default\x0a");
					}
				}
				ActKey(KEYON+UP+FlightAssist);
			}
		}
		initLED(ToggleFALED, sFlightAssist);
		if(DebugMode & !FlightAssistGameMode) printf("EnhancedFAOFF [HOLD]	[%d]	[ENABLE:[1] DISABLE:[0]]	Rcorrection	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", sFlightAssist, sRCorrection);
	}

	//TOGGLE: Reverse Throttle
	int initToggleReverseThrottle(){
		if(Throttle[LTB]){
			sRT=!sRT;
			if(RFlightThrootleGameMode){	//TOGGLE
				ActKey(KEYON+PULSE+ReverseThrottle);
			}else{		//HOLD Key Down
				ActKey(KEYON+DOWN+ReverseThrottle);
			}
		}else{	//HOLD Key Up
			if(!RFlightThrootleGameMode & sRT){
				sRT=!sRT;
				ActKey(KEYON+UP+ReverseThrottle);
			}
		}
		initLED(ToggleReverseThrottleLED, sRT);
		if(DebugMode) printf("Reverse Throttle	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", sRT );
	}
	
	//TOGGLE: Rotational Correction
	int initToggleRotationCorrection(){
		if(!Joystick[S3]){
			sRCorrection=!sRCorrection;
			ActKey(KEYON+PULSE+RotationalCorrection);
			initLED(ToggleRCorrectionLED, sRCorrection);
		}else{	//Reset On The FLY S3 + SWITCH
			sRCorrection=!sRCorrection;
		}
		if(DebugMode) printf("Rotation Correction	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", sRCorrection);
	}

	//TOGGLE: External Camera
	int initToggleCamera(){
		sCameraMode=!sCameraMode;
		if(sSilentRuning){
			if(!vSLonCamera){
				vSLonCamera=!vSLonCamera;
				//if(DebugMode)printf("vSLonCamera [%d]\x0a", vSLonCamera);
			}
			initToggleSilentRuning();	//If Silent Runing is Engaged, Disengade it
			if(vSLonCamera){
				vSLonCamera=!vSLonCamera;
				//if(DebugMode)printf("vSLonCamera [%d]\x0a", vSLonCamera);
			}
		}
		if(sCameraMode){	//Open The Camera Mode
			if(OptimalPIPMode){
				vOptimalPIPCCBackup = vOptimalPIP;	//Backup Actual PIP Mode
				initPIPPower(SYS, ENG);	//4 SYS 2 ENG (3)
			}
			DeferCall(1000, &ActKey, KEYON+PULSE+mClassifiedCamera);	//Call The Camera Mode Macro
		}else{	//Close The Camera Mode
			ActKey(KEYON+PULSE+ClassifiedCamera);	//Push The Camera Mode Key
			if(OptimalPIPMode){
				DeferCall(1000, &ActKey, KEYON+PULSE+EXEC("initRestorePIPPower(vOptimalPIPCCBackup);"));	//Restore Previous PIP Mode If vOptimalPIPCCBackup != 4 SYS 2 ENG (3)
			}
		}
		initLED(ToggleCameraLED, sCameraMode);
		if(DebugMode) printf("Classified Camera	[%d]	[ON:[1] OFF:[0]]\x0a", sCameraMode);
	}

	//TOGGLE: Head Look
	int initToogleHeadLook(){
		if(!HMD & !TrackIR){
			if(Throttle[SC]){
				sHeadLook=!sHeadLook;
				if(HeadLookGameMode){	//HeadLook [TOGGLE] Mode Ingame
					ActKey(KEYON+PULSE+HeadLook);
					if(DebugMode) printf("Head Look	[TOOGLE]	[%d]	[ON:[1] OFF:[0]]\x0a", sHeadLook);
				}else{	//HeadLook [HOLD] Mode Ingame Engage
					ActKey(KEYON+DOWN+HeadLook);
				}
			}else{
				if(!HeadLookGameMode & sHeadLook){	//HeadLook [HOLD] Mode Ingame DisEngage
					sHeadLook=!sHeadLook;
					ActKey(KEYON+UP+HeadLook);
				}
			}
			initLED(ToogleHeadLookLED, sHeadLook);
			if(DebugMode & !HeadLookGameMode) printf("Head Look	[HOLD]	[%d]	[ON:[1] OFF:[0]]\x0a", sHeadLook);
		}
	}

	//TOGGLE: GameMenu
	int initToggleGameMenu(){
		sGameMenu=!sGameMenu;
		if(sSilentRuning){
			if(!vSLonGameMenu){
				vSLonGameMenu=!vSLonGameMenu;
				//if(DebugMode)printf("vSLonGameMenu [%d]\x0a", vSLonGameMenu);
			}
			initToggleSilentRuning();	//If Silent Runing is Engaged, Disengade it
			if(vSLonGameMenu){
				vSLonGameMenu=!vSLonGameMenu;
				//if(DebugMode)printf("vSLonGameMenu [%d]\x0a", vSLonGameMenu);
			}
		}
		if(sGameMenu){	//Open The Game Menu
			if(OptimalPIPMode){
				vOptimalPIPGMBackup = vOptimalPIP;	//Backup Actual PIP Mode
				initPIPPower(SYS, ENG);	//4 SYS 2 ENG (3)
			}
			ActKey(KEYON+PULSE+SetSpeed0);
		}else{	//Close The Game Menu
			if(OptimalPIPMode){
				DeferCall(6000, &ActKey, KEYON+PULSE+EXEC("initRestorePIPPower(vOptimalPIPGMBackup);"));	//Restore Previous PIP Mode If vOptimalPIPGMBackup != 4 SYS 2 ENG (3)
			}
		}		
		DeferCall(3000, &ActKey, KEYON+PULSE+GameMenu);
		initLED(ToggleGameMenuLED, sGameMenu);
		if(DebugMode) printf("Game Menu	[%d]	[ENABLE:[1] DISABLE:[0]]\x0a", sGameMenu);
	}