//	Copyright (C) 2017 Thomas Duployez (CMDR Touille)
//	V2.3.00.1b	2017/03
//	Distributed freely under the MIT License.
//	
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//	
//	The above copyright notice and this permission notice shall be included in all
//	copies or substantial portions of the Software.
//	
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//	SOFTWARE.
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	INCLUDED FILES																																				//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

include "target.tmh"
include "ED+HCS v2.3_Variables.tmh"
include "ED+HCS v2.3_Settings.tmh"
include "ED+HCS v2.3_USBKey.ttm"
include "ED+HCS v2.3_KeyBindings.ttm"
include "ED+HCS v2.3_Macros.tmh"
include "ED+HCS v2.3_Functions_HARDWARE.tmh"
include "ED+HCS v2.3_Functions_TOGGLE.tmh"
include "ED+HCS v2.3_Functions_CORE.tmh"

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
int main()
{
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	Configure(&HCougar, MODE_EXCLUDED);
	Configure(&T16000, MODE_EXCLUDED);
	Configure(&T16000L, MODE_EXCLUDED);
	Configure(&TWCSThrottle, MODE_EXCLUDED);

	//Rudders
	if(Rudders < 2) Configure(&TFRPRudder, MODE_EXCLUDED);
	else Configure(&TFRPRudder, MODE_FILTERED);

	//MFD
	if(USEMFD == 0){
		Configure(&LMFD, MODE_EXCLUDED);
		Configure(&RMFD, MODE_EXCLUDED);
	}

	if(Init(&EventHandle)) return 1; // declare the event handler, return on error

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	BASE SETTINGS																																				//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	SetKBRate(PulseTime, DelayTime);
	SetKBLayout(KBLayout);
	
	if(DebugMode | DebugMMode) printf("-------------------------Hardware Initialisation--------------------------\x0a");

	// Initiate Axis Mappings
	if(DebugMode | DebugMMode) printf("Initialising Joystick Axis\x0a"); initJoystickAxis();
	if(DebugMode | DebugMMode) printf("Initialising Throttle Axis\x0a"); initThrottleAxis();
	if(Rudders == 2){
		if(DebugMode | DebugMMode) printf("Initialising Rudders Axis\x0a");
//		initRudders();
	}	
	
	// Initiate Curve Mappings
	if(DebugMode | DebugMMode) printf("Initialising Joystick Curve\x0a"); initSetJoystickCurves();
	if(DebugMode | DebugMMode) printf("Initialising Throttle Curve\x0a"); initSetThrottleCurves();
	if(Rudders == 2){		
		if(DebugMode | DebugMMode) printf("Initialising TFRPRudders Curve\x0a");
		initSetTFRPCurves();
	}	
	
	//Initiate MFD
	if(USEMFD > 0){if(DebugMode | DebugMMode) printf("Initialising Right MFD\x0a"); initRightMFD();}
	if(USEMFD > 1){if(DebugMode | DebugMMode) printf("Initialising Left MFD\x0a"); initLeftMFD();}

	// Initiate Led State
	if(DebugMode | DebugMMode) printf("Initialising LED States\x0a"); initLEDStates();

	// Initiate Custom Macros Functions (ED+HCS_Macros_v2.3.tmh)
	initCustomCommands();
	
	if(DebugMode) initPrintState();

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	;)																																							//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	printf("--------------------------V2.3.00.1b----2017/03/06------------------------\x0a");
	printf("---------Enhanced Elite Dangerous Warthog Profile by CMDR Touille---------\x0a");
	printf("------------------------------Fly Safe CMDR! o7---------------------------\x0a");
	printf("-o/--o/--o/-Aussiedroid-DarKcyde0-WraithMG11235-Synkc-Solarfly-o/--o/--o/-\x0a");
	printf("-o/--o/-----Farinhir : The First CMDR to report Bug & FeedBack-----o/--o/-\x0a");
	printf("--------------------------------------------------------------------------\x0a");

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	Shift States // Modifier don't touch this																													//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	SetShiftButton(&Joystick, ModifierKey, &Throttle, APPAT, APALT);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	MAP JOYSTICK CONTROLS																																		//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

//--JOYSTICK BUTTON---------------------------------------------------------------------------------------------------------------------------------------------//

	MapKey (&Joystick, TG1, EXEC("initFire();"));
	MapKeyR(&Joystick, TG1, EXEC("initFire();"));

	MapKey (&Joystick, TG2, 0);	// Reseved for initCombinedFire()
	MapKeyR(&Joystick, TG2, 0);	// Reseved for initCombinedFire()	

	MapKey(&Joystick, ToggleHardpointKey, TEMPO(EXEC("initToggleCombinedFire();"), EXEC("initToggleHardpoints();"), LongPressDelay));

	MapKey (&Joystick, SecondaryFireKey, EXEC("initFire();"));
	MapKeyR(&Joystick, SecondaryFireKey, EXEC("initFire();"));

	//MapKey(&Joystick, ModifierKey, 0);	// Modifier ModifierKey don't touch this
	
	MapKey (&Joystick, FlightAssistKey, EXEC(" initToggleEnhancedFAOFF();"));
	MapKeyR(&Joystick, FlightAssistKey, EXEC(" initToggleEnhancedFAOFF();"));

//--JOYSTICK HAT------------------------------------------------------------------------------------------------------------------------------------------------//

	//	-------------------------Trim Switch
	MapKeyIOUMD(&Joystick, H1U,	// UP
		0, FC_Increase_Speed,
		PULSE+PowerEng, TEMPO(EXEC("initPIPPower(ENG);"), TEMPO(EXEC("initPIPPower(ENG,SYS);"), EXEC("initPIPPower(ENG,WEP);"), PIPPressDelay), PIPPressDelay),
		0, 0
	);
	MapKeyIOUMD(&Joystick, H1D,	// DOWN
		0, FC_Decrease_Speed,
		0, TEMPO(EXEC("initPIPPower();"), SEQ(EXEC("initPIPPower(SYS,WEP,MID);"),EXEC("initPIPPower(ENG,WEP,MID);"), EXEC("initPIPPower(ENG,SYS,MID);")), PIPPressDelay),
		0, 0
	);	
	MapKeyIOUMD(&Joystick, H1L,	// LEFT
		0, FC_Zoom_OUT,
		PULSE+PowerSys, TEMPO(EXEC("initPIPPower(SYS);"), TEMPO(EXEC("initPIPPower(SYS,ENG);"), EXEC("initPIPPower(SYS,WEP);"), PIPPressDelay), PIPPressDelay),
		0, 0
	);
	MapKeyIOUMD(&Joystick, H1R,	// RIGHT
		0, FC_Zoom_IN,
		PULSE+PowerWep, TEMPO(EXEC("initPIPPower(WEP);"), TEMPO(EXEC("initPIPPower(WEP,ENG);"), EXEC("initPIPPower(WEP,SYS);"), PIPPressDelay), PIPPressDelay),
		0, 0
	);

	//	-------------------------Target Management Switch (TMS)
	MapKeyIOUMD(&Joystick, H2U,	// UP
		0, PULSE+Enter_Free_Camera,
		0, TEMPO(PULSE+SelectTargetAhead, PULSE+SelectHighestThreat, LongPressDelay),
		0, 0
	);
	MapKeyIOUMD(&Joystick, H2D,	// DOWN
		0, PULSE+FC_Exit_Free_Camera,
		0, PULSE+SelectNextSystemInRoute,
		0, 0
	);
	MapKeyIOUMD(&Joystick, H2L,	// LEFT
		0, PULSE+FC_Lock_To_Vehicle,
		PULSE+SelectPrevSubsystem, TEMPO(PULSE+SelectPrevShip, PULSE+SelectPrevHostileShip, LongPressDelay),
		0, 0
	);
	MapKeyIOUMD(&Joystick, H2R,	// RIGHT
		0, PULSE+FC_Lock_To_World,
		PULSE+SelectNextSubsystem, TEMPO(PULSE+SelectNextShip, PULSE+SelectNextHostileShip, LongPressDelay),
		0, 0
	);

	//	-------------------------Data Management Switch (DMS)
	MapKeyIOUMD(&Joystick, H3U,	// UP
		0, FC_Increase_Blur,
		PULSE+CommsPanel, TEMPO(EXEC("initToggleSilentRuningOFFonFire();"), EXEC("initToggleHeatSinkonSilentRuning();"), ExtraPressDelay),
		0, 0
	);
	MapKeyIOUMD(&Joystick, H3D,	// DOWN
		0, FC_Decrease_Blur,
		PULSE+RolePanel, TEMPO(0,EXEC("initToggleSilentRuning();"), LongPressDelay),
		0, 0
	);
	MapKeyRIOUMD(&Joystick, H3D,	// DOWN RELEASE
		0, 0,
		0,EXEC("initToggleSilentRuning();"),
		0, 0
	);
	MapKeyIOUMD(&Joystick, H3L,	// LEFT
		0, FC_Decrease_Focus_Distance,
		PULSE+TargetPanel, PrevFireGroup,
		0, 0
	);
	MapKeyIOUMD(&Joystick, H3R,	// RIGHT
		0, FC_Increase_Focus_Distance,
		PULSE+SystemPanel, NextFireGroup,
		0, 0
	);

	//	-------------------------Countermeasures Management Switch (CMS)
	MapKeyIOUMD(&Joystick, H4U,	// UP
		0, FC_Move_Forward,
		0, UIUp,
		0, 0
	);
	MapKeyIOUMD(&Joystick, H4D,	// DOWN
		0, FC_Move_Backward,
		0, UIDown,
		0, 0
	);
	MapKeyIOUMD(&Joystick, H4L,	// LEFT
		0, Previous_Camera,
		UIPrevPanel, UILeft,
		0, 0
	);
	MapKeyIOUMD(&Joystick, H4R,	// RIGHT
		0, Next_Camera,
		UINextPanel, UIRight,
		0, 0
	);
	MapKeyIOUMD(&Joystick, H4P,	// PUSH
		0, PULSE+FC_Zoom_Dof_Toggle,
		UIBack, UISelect,
		0, 0
	);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	MAP THROTTLE ARM CONTROLS																																	//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

//--THROTTLE ARM BUTTON-----------------------------------------------------------------------------------------------------------------------------------------//

	//	-------------------------Slew Control Push
	MapKey (&Throttle, SC, EXEC("initToogleHeadLook();"));	//ONLY IF !HMD & !TRACKIR : Head Look		
	MapKeyR(&Throttle, SC, EXEC("initToogleHeadLook();"));

	//	-------------------------Left Throttle Button (RED)
	MapKeyIO (&Throttle, LTB, EXEC("initSetThrottleCurves();"), EXEC("initToggleReverseThrottle();"));
	MapKeyRIO(&Throttle, LTB, 0, EXEC("initToggleReverseThrottle();"));

	//	-------------------------Mic Switch
	MapKey (&Throttle, MSP, EXEC("initVoicePTT();"));
	MapKeyR(&Throttle, MSP, EXEC("initVoicePTT();"));

//--THROTTLE ARM HAT--------------------------------------------------------------------------------------------------------------------------------------------//

	//	-------------------------Mic Switch
	MapKeyIOUMD(&Throttle, MSU,	// UP
		0, 0,
		TEMPO(PULSE+FighterFocus, PULSE+FighterDock, LongPressDelay), TEMPO(PULSE+WingmanTarget, PULSE+WingmanNavlock, LongPressDelay),
		0, 0
	);
	MapKeyIOUMD(&Throttle, MSD,	// DOWN
		0, 0,
		TEMPO(PULSE+FighterFollow, PULSE+FighterOrders, LongPressDelay), PULSE+SelectWingman2,
		0, 0
	);
	MapKeyIOUMD(&Throttle, MSL,	// LEFT
		0, 0,
		TEMPO(PULSE+FighterHoldPosition, PULSE+FighterDefensive, LongPressDelay), PULSE+SelectWingman1,
		0, 0
	);
	MapKeyIOUMD(&Throttle, MSR,	// RIGHT
		0, 0,
		TEMPO(PULSE+FighterHoldFire, PULSE+FighterAggressive, LongPressDelay), PULSE+SelectWingman3,
		0, 0
	);
	
	//	-------------------------Coolie Hat Switch	
	MapKeyIOUMD(&Throttle, CSU,	// UP
		0, ThrustUp,
		TEMPO(EXEC("TrimDXAxis(DX_Y_AXIS, - Trim_INC);"), EXEC("TrimDXAxis(DX_X_AXIS, CURRENT);TrimDXAxis(DX_Y_AXIS, CURRENT);"), LongPressDelay), ThrustUp,
		0, 0
	);
	MapKeyIOUMD(&Throttle, CSD,	// DOWN
		0, ThrustDown,
		TEMPO(EXEC("TrimDXAxis(DX_Y_AXIS,   Trim_INC);"), EXEC("TrimDXAxis(DX_X_AXIS, SET(0));TrimDXAxis(DX_Y_AXIS, SET(0));"), LongPressDelay), ThrustDown,
		0, 0
	);
	MapKeyIOUMD(&Throttle, CSL,	// LEFT
		0, ThrustLeft,
		EXEC("TrimDXAxis(DX_X_AXIS, -Trim_INC);"), ThrustLeft,
		0, 0
	);
	MapKeyIOUMD(&Throttle, CSR,	// RIGHT
		0, ThrustRight,
		EXEC("TrimDXAxis(DX_X_AXIS,  Trim_INC);"), ThrustRight,
		0, 0
	);

//--THROTTLE ARM SWITCH-----------------------------------------------------------------------------------------------------------------------------------------//

	//	-------------------------Speedbrake
	MapKey  (&Throttle, SPDF, TEMPO(EXEC("initFrameShiftDrive();"), EXEC("initSystemJump();"), ExtraPressDelay));												// Switch FORWARD
//	MapKey  (&Throttle, SPDM, 0);																																// Switch MIDDLE	
	MapKeyIO(&Throttle, SPDB, EXEC("initToggleSuperCruiseMode();"), TEMPO(EXEC("initThrottleBoost();"), EXEC("initSuperCruise();"), LongPressDelay));			// Switch BACK HOLD

	//	-------------------------Boat Switch
	MapKey(&Throttle, BSF, PULSE+GalaxyMap);																		// Switch FORWARD
	MapKey(&Throttle, BSM, PULSE+UIBack);																			// Switch MIDDLE
	MapKey(&Throttle, BSB, PULSE+SystemMap);																		// Switch BACK

	//	-------------------------China Hat
	MapKey(&Throttle, CHF, TEMPO(PULSE+DeployHeatSink, PULSE+ChargeECM, LongPressDelay));							// Switch FORWARD
//	MapKey(&Throttle, CHM, 0);																						// Switch MIDDLE
	MapKey(&Throttle, CHB, TEMPO(PULSE+FireChaffLauncher, PULSE+UseShieldCell, LongPressDelay));					// Switch BACK

	//	-------------------------Pinky Throttle
	MapKeyIO(&Throttle, PSF, PULSE+ChangeWeaponColor, PULSE+OrbitalLines);											// Switch FORWARD
//	MapKey  (&Throttle, PSM, 0);																					// Switch MIDDLE
	MapKeyIO(&Throttle, PSB, PULSE+ChangeEngineColor, PULSE+HideShipGUI);											// Switch BACK


//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	MAP THROTTLE BASE CONTROLS																																	//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

//--THROTTLE BASE BUTTON----------------------------------------------------------------------------------------------------------------------------------------//

	//	-------------------------Landing Gear/ Warning Horn Silence Button
	MapKeyIO(&Throttle, LDGH, TEMPO(PULSE+TrackIRPause, TEMPO(PULSE+EXEC("initCaptureVideo();"), PULSE+EXEC("initStreamingVideo();"), ExtraPressDelay), LongPressDelay),
							  TEMPO(PULSE+EXEC("initHeadCenter();"), TEMPO(EXEC("initScreenshot();"), PULSE+HighResScreenshot, ExtraPressDelay), LongPressDelay));						// PUSH

	//	-------------------------Autopilot Engage Button Same As Autopilot Disengage Button
	MapKeyIO(&Throttle, APENG, EXEC("initRCDocking();"), TEMPO(0, EXEC("initEscapeFight();"), LongPressDelay));																			// PUSH

	//	-------------------------Autopilot Disengage Button Same As Autopilot Engage Button
//	MapKey(&Throttle, APDIS, 0);																																						// <Unmapped> PUSH

//--THROTTLE BASE SWITCH----------------------------------------------------------------------------------------------------------------------------------------//	
	
	//	-------------------------FLAPS - Map Throttle to Joystick Curve Presets
	MapKey(&Throttle, FLAPU, EXEC("initSetJoystickCurves();"));														// Flaps UP
	MapKey(&Throttle, FLAPM, EXEC("initSetJoystickCurves();"));														// Flaps MIDDLE
	MapKey(&Throttle, FLAPD, EXEC("initSetJoystickCurves();"));														// Flaps DOWN

	//	-------------------------Autopilot Select Switch // Modifier don't touch this
//	MapKey(&Throttle, APPAT, 0);																					// Modifier UP			(PATH)
	MapKey (&Throttle, APPAT, EXEC("initToggleCamera();"));															// Modifier UP			(PATH)
	MapKeyR(&Throttle, APPAT, EXEC("initToggleCamera();"));															// Modifier UP Release	(PATH)
//	MapKey(&Throttle, APAH, 0);																						// Modifier MIDDLE		(ALT/HDG)
//	MapKey(&Throttle, APALT, 0);																					// Modifier DOWN		(ALT)

	//	-------------------------Engine Fuel Flow Switches LEFT	
	MapKey(&Throttle, EFLNORM, EXEC("initToggleExplorerMode();"));													// Switch UP
	MapKey(&Throttle, EFLOVER, EXEC("initToggleExplorerMode();"));													// Switch DOWN

	//	-------------------------Engine Fuel Flow Switches RIGHT
	MapKey(&Throttle, EFRNORM, EXEC("initToggleLights();"));														// Switch UP
	MapKey(&Throttle, EFROVER, EXEC("initToggleLights();"));														// Switch DOWN

	//	-------------------------Engine Operate Ign/Norm LEFT
//	MapKeyIO(&Throttle, EOLIGN, TEMPO(EXEC("initTogglePTTPTP();"), EXEC("initTogglePTTMode();"), LongPressDelay), 
//								TEMPO(EXEC("initToggleCamera();"), EXEC("initFPSCONNECTION();"), LongPressDelay));	// UP	
	MapKeyIO(&Throttle, EOLIGN, TEMPO(EXEC("initTogglePTTPTP();"), EXEC("initTogglePTTMode();"), LongPressDelay), 
								TEMPO(0, EXEC("initFPSCONNECTION();"), LongPressDelay));	// UP								
//	MapKey  (&Throttle, EOLNORM, 0);																				// OFF
	MapKey  (&Throttle, EOLMOTOR, EXEC("initToggleVoiceAttackMic();"));												// DOWN
	MapKeyR (&Throttle, EOLMOTOR, EXEC("initToggleVoiceAttackMic();"));												// DOWN RELEASE

	//	-------------------------Engine Operate Ign/Norm RIGHT
	MapKeyIO(&Throttle, EORIGN, TEMPO(EXEC("initToggleSecureRetract();"), EXEC("initToggleRotationalCorrection();"), LongPressDelay),
								TEMPO(EXEC("initToggleOptimalPIPMode();"), EXEC("initToggleStopFireRetractHardpoints();"), LongPressDelay));	// UP								
//	MapKey  (&Throttle, EORNORM, 0);																											// OFF

	MapKey  (&Throttle, EORMOTOR, EXEC("initToggleGameMenu();"));													// DOWN
	MapKeyR (&Throttle, EORMOTOR, EXEC("initToggleGameMenu();"));													// DOWN RELEASE

	//	-------------------------APU Start
	MapKey(&Throttle, APUON, EXEC("initJettisonCargo();"));															// Switch UP
//	MapKey(&Throttle, APUOFF, 0);																					// Switch DOWN (OFF)

	//	-------------------------EAC
	MapKey (&Throttle, EACON, EXEC("initToggleLandingGear();"));													// Switch UP 			(ARM)
	MapKeyR(&Throttle, EACON, EXEC("initToggleLandingGear();"));													// Switch UP RELEASE
//	MapKey (&Throttle, EACOFF, 0);																					// Switch DOWN			(OFF)

	//	-------------------------RDR ALTM
	MapKey (&Throttle, RDRNRM, EXEC("initToggleCargoScoop();"));													// Switch UP			(NRM)
	MapKeyR(&Throttle, RDRNRM, EXEC("initToggleCargoScoop();"));													// Switch UP RELEASE
//	MapKey (&Throttle, RDRDIS, 0);																					// Switch DOWN			(DIS)


//--THROTTLE BASE TRHOTTLE--------------------------------------------------------------------------------------------------------------------------------------//

	//	-------------------------Throttle Idle Detents LEFT
	MapKey (&Throttle, IDLELON, EXEC("initToggleIDLEonThrottle();"));												// ON	[Locking (Down): Stationary]
	MapKeyR(&Throttle, IDLELON, EXEC("initToggleIDLEonThrottle();"));												// ON RELEASE
//	MapKey (&Throttle, IDLELOFF, 0);																				// OFF

	//	-------------------------Throttle Idle Detents RIGHT
//	MapKey (&Throttle, IDLERON, 0);																					// ON
//	MapKeyR(&Throttle, IDLERON, 0);																					// ON RELEASE
//	MapKey (&Throttle, IDLEROFF, 0);																				// OFF

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	MAP MFD																																						//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	//Set Right MFD
	int initRightMFD(){
//		MapKey(&RMFD, GAINU, 0);
//		MapKey(&RMFD, GAIND, 0);
//		MapKey(&RMFD, OSB01, 0);
//		MapKey(&RMFD, OSB02, 0);
//		MapKey(&RMFD, OSB03, 0);
//		MapKey(&RMFD, OSB04, 0);
//		MapKey(&RMFD, OSB05, 0);
//		MapKey(&RMFD, OSB06, 0);
//		MapKey(&RMFD, OSB07, 0);
//		MapKey(&RMFD, OSB08, 0);
//		MapKey(&RMFD, OSB09, 0);
//		MapKey(&RMFD, OSB10, 0);
//		MapKey(&RMFD, OSB11, 0);
//		MapKey(&RMFD, OSB12, 0);
//		MapKey(&RMFD, OSB13, 0);
//		MapKey(&RMFD, OSB14, 0);
//		MapKey(&RMFD, OSB15, 0);
//		MapKey(&RMFD, OSB16, 0);
//		MapKey(&RMFD, OSB17, 0);
//		MapKey(&RMFD, OSB18, 0);
//		MapKey(&RMFD, OSB19, 0);
//		MapKey(&RMFD, OSB20, 0);
//		MapKey(&RMFD, BRTU, 0);
//		MapKey(&RMFD, BRTD, 0);
//		MapKey(&RMFD, CONU, 0);
//		MapKey(&RMFD, COND, 0);
		if(DebugMode) printf("...Done\x0a");
	}
	
	//Set Left MFD
	int initLeftMFD(){
//		MapKey(&LMFD, GAINU, 0);
//		MapKey(&LMFD, GAIND, 0);
//		MapKey(&LMFD, OSB01, 0);
//		MapKey(&LMFD, OSB02, 0);
//		MapKey(&LMFD, OSB03, 0);
//		MapKey(&LMFD, OSB04, 0);
//		MapKey(&LMFD, OSB05, 0);
//		MapKey(&LMFD, OSB06, 0);
//		MapKey(&LMFD, OSB07, 0);
//		MapKey(&LMFD, OSB08, 0);
//		MapKey(&LMFD, OSB09, 0);
//		MapKey(&LMFD, OSB10, 0);
//		MapKey(&LMFD, OSB11, 0);
//		MapKey(&LMFD, OSB12, 0);
//		MapKey(&LMFD, OSB13, 0);
//		MapKey(&LMFD, OSB14, 0);
//		MapKey(&LMFD, OSB15, 0);
//		MapKey(&LMFD, OSB16, 0);
//		MapKey(&LMFD, OSB17, 0);
//		MapKey(&LMFD, OSB18, 0);
//		MapKey(&LMFD, OSB19, 0);
//		MapKey(&LMFD, OSB20, 0);
//		MapKey(&LMFD, BRTU, 0);
//		MapKey(&LMFD, BRTD, 0);
//		MapKey(&LMFD, CONU, 0);
//		MapKey(&LMFD, COND, 0);
		if(DebugMode) printf("...Done\x0a");
	}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	EVENT HANDLER																																				//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

int EventHandle(int type, alias o, int x)
{
	int TRPCOMBO; 
	int Differential_Toe;
	int THR_FC_AxisLight;
	
	// Throttle & MFD : On-The-FLy Backlight Control
	if(&o == &Throttle & x == THR_FC & Joystick[ModifierKey]){	//HOLD ModifierKey on Joystick & Move Throttle Friction Control Axis
		THR_FC_AxisLight = (AxisVal(Throttle[THR_FC], &axdata) - 32766) / 256 * -1;
		vThrottleLightBackup = THR_FC_AxisLight;
		vRMFDLightBackup     = THR_FC_AxisLight;
		vLMFDLightBackup     = THR_FC_AxisLight;
		initBACKLIGHT(Throttle_BL, vThrottleLightBackup);
		initBACKLIGHT(RMFD_BL, vRMFDLightBackup);
		initBACKLIGHT(LMFD_BL, vLMFDLightBackup);
	}
	
	// Combine rudder toe brakes into new axis, mapped to DX_THROTTLE_AXIS
//	if (&o == &TFRPRudder & (x == TRPLEFT | x == TRPRIGHT)) {
//		if (TFRPRudder[TRPLEFT] < TFRPRudder[TRPRIGHT]) TRPCOMBO = TFRPRudder[TRPRIGHT];
//		else                                            TRPCOMBO = TFRPRudder[TRPLEFT];
//		DXAxis (DX_THROTTLE_AXIS, -TRPCOMBO);
//	}
	
	//Map the MODE_FILTERED TFRP through Target; we can Trim, set deadzones, J/Scurves, etc.
//	if (&o == &TFRPRudder) {
//		GetAxisData(&o, x);
//		axdata.val = AxisVal(o[x], &axdata);
//		if(x == TRPLEFT | x == TRPRIGHT) axdata.val = -axdata.val;	//Reverse the Toe Brakes, TM why u do dis??
//		//axdata.locked = 1;										//Uncomment to disable pedals but keep TRPCOMBO axis
//		if(!axdata.locked & !axdata.relative) GameOutput(&o, x, axdata.val);
//	}

	//Map the MODE_FILTERED TFRP through Target; we can Trim, set deadzones, J/Scurves, etc.
	if(&o == &TFRPRudder){
		GetAxisData(&o, x);
		axdata.val = AxisVal(o[x], &axdata);
		if(x == TRPLEFT | x == TRPRIGHT){
			axdata.locked = 1;
			Differential_Toe = -TFRPRudder[TRPRIGHT]/2 + TFRPRudder[TRPLEFT]/2;
			
			//apply curves/deadzones and output data
			Differential_Toe = AxisVal(Differential_Toe, &axdata);
			GameOutput(&o, TRPRIGHT, Differential_Toe);	//Comment out this line (//) to get the combo to map in game, then Uncomment
			
			if(TFRPRudder[TRPLEFT] < TFRPRudder[TRPRIGHT]) TRPCOMBO = TFRPRudder[TRPRIGHT];
			else TRPCOMBO = TFRPRudder[TRPLEFT];
			
			//apply curves/deadzones and output data
			TRPCOMBO = AxisVal(TRPCOMBO, &axdata);
			GameOutput (&o, TRPLEFT, -TRPCOMBO);
		}
		if(!axdata.locked & !axdata.relative) GameOutput(&o, x, axdata.val);
	}

	else DefaultMapping(&o, x);
}
