//	Copyright (C) 2017  CMDR Touille
//
//	This program is free software: you can redistribute it and/or modify
//	it under the terms of the GNU General Public License as published by
//	the Free Software Foundation, either version 3 of the License, or
//	(at your option) any later version.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with this program.  If not, see <http://www.gnu.org/licenses/>.
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	PERSONAL SETTINGS																																			//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	int DebugMode	=1;						//If 1 Target Script Editor Window will Display Debug Msg

	int HMD		=1;							//If HMD set to 1 and set TrackIR to 0
	int TrackIR	=0;							//If TrackIR set to 1 and set HMD to 0
	
	define Rudders	0						//0 for no rudders, 1 for rudders, 2 for T.Flight rudders
	define USEMFD	0						//If you have one MFD, set this to 1. If you have two MFDs, set it to 2. (Mapkey For MFD not configurd yet)

	int OptimalPIPMode	=1;					//Automatic PIP Mode: When Hardpoint is Up or Down / When Classified Camera is ON or Off / When Escape Fight / When Request Docking / Game Menu /...
	int SecureRetract	=1;					//Rectract Landing Gear, Cargo Scoop and Hardpoints for Escape Fight, System Jump => Reset Switch States for Scoop and Gear(Switch)

	int SupecruiseOnThrottle	=1;			//initToggleSuperCruiseMode()	Supercruise if Boost when Throttle > 99%					Can be switched on the Fly [Long Press S3 + Speedbrake BACK]
	int GameMenuOnIDLE			=0;			//initToggleIDLEonThrottle()	Game Menu on Throttle IDLE State
	int AfterburnerDetent		=0;			//Hardware throttle Afterburner Detent You can change CurveValue in initSetThrottleCurves(), if(AfterburnerDetent){....

	int SilentRuningOFFonFire	=1;			//initToggleSilentRuningOFFonFire()	Silent Runing OFF when Fire [1] Stay ON When Fire {0]}										IF SilentRuningGameMode is Set to [1]	Can be switched on the Fly Short Data Management Switch UP
	int HeatSinkonSilentRuning	=0;			//initToggleHeatSinkonSilentRuning()	[WARNING : Heat Sink Is limited Use with Caution] Automatic HeatSink On Silent Runing	IF SilentRuningGameMode is Set to [1]	Can be switched on the Fly Long Data Management Switch UP
	
	define VoiceAttack 1					//If VoiceAttack set to 1 : Engine Fuel Flow Switches RIGHT Mute / Unmute Voice Attack


//	-------------------------Match This with ED Key binding Ingame (Left if you use Unmodified ED KeyBinding File include with this script)
	int FlightAssistGameMode		=0;		//Flight Miscellaneous / Toggle Flight Assist		[HOLD:0, TOGGLE:1]
//	int DriveAssistGameMode			=0;		//Driving / Drive Assist							[HOLD:0, TOGGLE:1]

	int HardPointsonFireGameMode	=1;		//Weapons / Firing Deploys Hardpoints 				[OFF:0, ON:1]
	int SilentRuningGameMode		=1;		//Cooling / Silent Runing							[HOLD:0, TOGGLE:1]

	int RFlightThrootleGameMode		=0;		//Flight Throttle / Forward Only Throttle Reverse	[HOLD:0, TOGGLE:1]
//	int RDriveThrootleGameMode		=0;		//Drive Throttle / Forward Only Throttle Reverse	[HOLD:0, TOGGLE:1]

//	int HeadLookGameMode			=1;		/Driving Mode Switches & Mode Switches / HeadLock	[HOLD:0, TOGGLE:1]

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	TOGGLE STATES																																				//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	int sCameraMode;					//initToggleCamera()				Classified Camera
	int sHardPoints;					//initToggleHardpoints()			HardPoints													Can be switched on the Fly [S3 + Switch]
	int sGears;							//initToggleLandingGear()			Landing Gears												Can be switched on the Fly [S3 + Switch]
	int sCargo;							//initToggleCargoScoop()			Cargo Scoop													Can be switched on the Fly [S3 + Switch]
	int sLights;						//initToggleLights()				ShipLights													Can be switched on the Fly [S3 + Switch]
	int sCombinedFire;					//initToggleCombinedFire()			Combined Fire on Trigger 2 (full depression of trigger)		Can be switched on the Fly [S3 + Switch]
	int sRCorrection	=1;				//initToggleRotationCorrection()	Rotational Correction	[OFF:0, ON:1]						Can be switched on the Fly [S3 + Switch]
	int sPTTMode;						//initTogglePTT()/initVoicePTT()	PTT Or PTP 				[HOLD:[0] TOGGLE:[1]]				Can be switched on the Fly
	int sPTTState;						//initTogglePTT()					Internal / External Mic	[External:[0] Internal:[1]}			Can be switched on the Fly [S3 + Switch]
	int sSilentRuning;					//initToggleSilentRuning()			Silent Runing
	int sIDLE;							//initToggleIDLEonThrottle()		Throttle IDLE
	int sFA;							//initToggleEnhancedFAOFF()			Flight Assist [TOGGLE] Mode Ingame
	int sSL;							//initToggleSilentRuning()			Silent Runing [TOGGLE] Mode Ingame
	int sRT;							//initToggleReverseThrottle()		Reverse Throttle
	int sVoiceAttack;					//initToggleVoiceAttackMic()		Voice Attack Mic

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	BASE SETTINGS																																				//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	define PulseTime 25					//PULSE+ Delay time 25
	define DelayTime 75					//D() Delay time 75
	define KBLayout KB_ENG				//Default Keyboard Layout KB_ENG

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	PRESS & PULSE DELAY SETTINGS																																		//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	//PRESS DELAY
	define MiniPressDelay	150			//Shortest Delay 150
	define ShortPressDelay	250			//Shorter Delay 250
	define MediumPressDelay	350			//Medium Delay 350
	define LongPressDelay	500			//Long Delay 500
	define ExtraPressDelay	1500		//Longest Delay 1500
	
	//PULSE DELAY
	define MiniPulseDelay	150			//Shortest Delay 150
	define ShortPulseDelay	250			//Shorter Delay 250
	define MediumPulseDelay	350			//Medium Delay 350
	define LongPulseDelay	500			//Long Delay 500
	define ExtraPulseDelay	2000		//Longest Delay 2000

	//FSD OFF DELAY MACRO: System Jump
	define FSDOFFDelay		25000		//Longest Delay 25000
	
	//PIP DELAY
	define PIPPressDelay	350			//PIP PressDelay 350
	define PIPPulseDelay	100			//PIP PulseDelay 100 initPIPPower()
	
	//HeatSink On Silent Runing Deploy Delay if HeatSinkOnSilentRuning is set to [1]
	define HeatSinkonSilentRuningDelay 8000

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	LED SETTINGS // LED1, LED2, LED3, LED4, LED5 // 5 LED's MAXIMUM																								//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	define ToggleLandingGearLED				0
	define ToggleCargoScoopLED				0
	define ToggleLightsLED					0
	define ToggleHardpointsLED				0
	define ToggleCombinedFireLED			LED4
	define ToggleRCorrectionLED				0
	define ToggleCameraLED					0
	define ToggleSuperCruiseModeLED			LED5
	define TogglePTTLED						0
	define ToggleVoicePTTLED				0
	define TogglePTTModeLED					0
	define ToggleSilentRuningLED			LED1
	define ToggleSilentRuningonFireLED		LED2
	define ToggleHeatSinkonSilentRuningLED	LED3
	define ToggleIDLEonThrottleLED			0		//IDLE LED Work only if ThrottleLEDOnIDLE != 0
	define ToggleFALED						0		//Flight Assist LED
	define ToggleVALED						0		//Voice Attack Mic LED
	define ToggleReverseThrottleLED			0		//Reverse Throttle LED
	define ToggleGameMenuLED				0		//Game Menu LED
	
//--Throttle Backlight (Value 0-255)----------------------------------------------------------------------------------------------------------------------------//

	// 0 to 42		is OFF
	// 43 to 85		is level 1
	// 86 to 128	is level 2
	// 129 to 171	is level 3
	// 172 to 214	is level 4
	// 215 to 255	is level 5
	
	define ThrottleLight 		255				//Base Throttle LED Intensity
	define ThrottleLightHMD 	85				//Base Throttle LED Intensity when HMD Use
	define ThrottleLEDOnIDLE	0				//Throttle LED Intensity on Throttle IDLE State
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	VARIABLES USED IN FUNCTION																																	//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	int vJoystickCurveProfile;					//Joystick Curve							Can be switched on the Fly [FLAPS]
	int vJoystickCurveProfileBackup;
	int vThrottleCurveProfile;					//Throttle Curve							Can be switched on the Fly [S3 + THROTTLE ARM RED BUTTON]
	int vThrottleLight;
	int vThrottleLightBackup;
	int vSecureEscapeFight;
	int vOptimalPIP;
	int vOptimalPIPBackup;
	int vVoicePTT;								//initVoicePTT()
	int vPTT;									//initVoicePTT()
	int vVoice;									//initVoicePTT()
	int vSilentRuningBackup;
	int vLG;									//initToggleLandingGear()
	int vCS;									//initToggleCargoScoop()
	int vGameMenu;								//initGameMenu()
	int vSLPF;
	int vSLSF;

	//initPIPPower()
	define SYS 1
	define ENG 2
	define WEP 3
	define MID 4
	int PIPfull, PIPhalf, PIPMid;
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	AXIS CURVES																																					//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	define FAOffCurve 2											//Flight Assist OFF Default Curve : 0 or 1 or 2 -> AXIS CURVES
	
//	Joystick
//						Up, MVR, DN
	short JS_CURVE[] = {0, 1, 2};								//Set via the FLAP switch (Up is most aggresive, down is least aggressive)
	short JS_ZOOM[]  = {1, 0, -1};
	define JS_DEADZONE 1										//Set the JS Deadzone.. use the Device Analyzer to validate

//	Slew
//						Up, MVR, DN
	short SL_CURVE[] = {0, 1, 2};								//Set via the FLAP switch (Up is most aggresive, down is least aggressive)
	short SL_ZOOM[]  = {1, 0, -1};
	define SL_DEADZONE 1										//Set the SL Deadzone.. use the Device Analyzer to validate
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	REPORT STATES																																				//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	int initPrintState(){				//Display the status of the macro toggles in Target Script Editor on run.
		printf("------------------------------Current States------------------------------\x0a");
		printf("		Supecruise On Throttle--------------------%d\x0a", SupecruiseOnThrottle);
		printf("		Secure Retract----------------------------%d\x0a", SecureRetract);
		printf("		Game Menu On IDLE-------------------------%d\x0a", GameMenuOnIDLE);
		printf("		Throttle LED Value On IDLE----------------%d\x0a", ThrottleLEDOnIDLE);
		printf("		Optimal PIP Mode--------------------------%d\x0a", OptimalPIPMode);
		printf("		Heat Sink On SilentRuning-----------------%d\x0a", HeatSinkonSilentRuning);
		printf("		Heat Sink OFF On Fire---------------------%d\x0a", SilentRuningOFFonFire);
//		printf("--------------------------------------------------------------------------\x0a");
		printf("		Rotation Correction-----------------------%d\x0a", sRCorrection);
		printf("		Combine Pri+Sec Fire----------------------%d\x0a", sCombinedFire);
		printf("		Classified CameraMode---------------------%d\x0a", sCameraMode);
		printf("		HardPoints--------------------------------%d\x0a", sHardPoints);
		printf("		Landing Gears-----------------------------%d\x0a", sGears);
		printf("		Cargo Scoop-------------------------------%d\x0a", sCargo);
		printf("		Ship Lights-------------------------------%d\x0a", sLights);
		printf("--------------------------In Game Settings--------------------------------\x0a");
		printf("		PPT------------------------HOLD/TOGGLE----%d\x0a", sPTTMode);
		printf("		PPT------------------------EXT./INT.------%d\x0a", sPTTState);
		printf("		Flight Assist--------------HOLD/TOGGLE----%d\x0a", FlightAssistGameMode);
//		printf("		Drive Assist---------------HOLD/TOGGLE----%d\x0a", DriveAssistGameMode);
		printf("		HardPoints on Fire---------OFF/ON---------%d\x0a", HardPointsonFireGameMode);
		printf("		R.Throttle Flight----------HOLD/TOGGLE----%d\x0a", RFlightThrootleGameMode);
//		printf("		R.Throttle Drive-----------HOLD/TOGGLE----%d\x0a", RDriveThrootleGameMode);
		printf("		Silent Runing--------------HOLD/TOGGLE----%d\x0a", SilentRuningGameMode);
		printf("--------------------------------------------------------------------------\x0a");
	}	

	