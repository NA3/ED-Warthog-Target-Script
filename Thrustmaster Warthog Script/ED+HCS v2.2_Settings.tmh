//	Copyright (C) 2017 Thomas Duployez (CMDR Touille)
//	V2.2.03.3b	2017/01
//	Distributed freely under the MIT License.
//	
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//	
//	The above copyright notice and this permission notice shall be included in all
//	copies or substantial portions of the Software.
//	
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//	SOFTWARE.
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	BASE SETTINGS																																				//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	define PulseTime 25					//PULSE+ Delay time 25
	define DelayTime 75					//D() Delay time 75
	define KBLayout KB_ENG				//Default Keyboard Layout KB_ENG

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	PERSONAL SETTINGS																																			//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	int DebugMode					=1;		//If 1 Target Script Editor Window will Display All Debug Msg
	int DebugMMode					=1;		//If 1 Target Script Editor Window will Display Some Debug Msg

	define Rudders					0		//0 for no rudders, 1 for rudders, 2 for T.Flight rudders
	define USEMFD					0		//If you have one MFD, set this to 1. If you have two MFDs, set it to 2. (Mapkey For MFD not configured yet)
	
	int HMD							=1;		//If HMD set to 1 and set TrackIR to 0
	int TrackIR						=0;		//If TrackIR set to 1 and set HMD to 0
	int VoiceAttack					=1;		//If VoiceAttack Used set to 1 : Engine Operate Ign/Norm Left Down Toggle VA Mic
	int CenterJoystickMount			=0;		//[0] Default Axis / [1] to Rotate Joystick Axis 15deg CCW to account for center mounting position	
//	int GFXVideo					=0;		//If you use Nvidia Shadowplay Set to [1] If you use AMD Relive Set to [2] If you use None Set to [0]
//	int UseSteamScreenshot			=0;		//If you want to use Steam to take Screenshot instead of ED Set it to [1] AND Map L_ALT+F12 (instead of F12) to your Steam ScreenShot Key : Steam -> Settings -> In-Game

	int GameMenuOnIDLE				=0;		//initToggleIDLEonThrottle()	Game Menu on Throttle IDLE State
	int AfterburnerDetent			=0;		//Hardware throttle Afterburner Detent You can change CurveValue in initSetThrottleCurves(), if(AfterburnerDetent){....
	
	int ExploreModeFire				=0;		//Triger use for Scan : 0 is Tg1, 1 is S2, 2 is Tg1 and S2.   By default put your system scan on Tg1 and leave value to 0 Work only if ExplorerMode is Enable (throttle chart : switch UP)
											//That will keep key pressed x Sec , so you can just push TG1 and/or S2 and release to scan : That work with TG1ScanDelay and S2ScanDelay (PRESS & PULSE DELAY SETTINGS bellow)
	
//	------------Default Settings------Can Be Switched On The Fly---[S3]Joystick Shift Key (see chart)---[S]Short---[L]Long---[EL]ExtraLong----------------------//

	//Throttle Engine Operate Ign/Norm Right UP
	int OptimalPIPMode				=1;		//Automatic PIP Mode: When Hardpoint is Up or Down / When Escape Fight / When Fire...			[S]
	int StopFireRetractHardpoints	=0;		//Stop Firing Retract Hardpoints Only if HardPointsonFireGameMode is Set to 1					[L]
	int SecureRetract				=1;		//Automatic Rectract Landing Gear, Cargo Scoop and Hardpoints for Escape Fight, System Jump		[S3]+[S]
	int sRCorrection				=1;		//Rotational Correction	[OFF:0, ON:1]															[S3]+[L]
	
	//Throttle Engine Operate Ign/Norm Left UP
	int sPTTState					=0;		//Internal / External Mic	[External:[0] Internal:[1]]		[S3]+[S]
	int sPTTMode					=1;		//PTT Or PTP 				[HOLD:[0] TOGGLE:[1]]			[S3]+[L]
	
	//Throttle Arm Speedbrake BACK
	int SupecruiseOnThrottle		=0;		//Supercruise if Boost when Throttle > 99%		[S3]

	//Joystick Data Management Switch UP (DMS) Effect Apply only if SilentRuningGameMode is Set to [1]
	int SilentRuningOFFonFire		=1;		//initToggleSilentRuningOFFonFire()	Silent Runing OFF when Fire [1] Stay ON When Fire {0]}		[S]
	int HeatSinkonSilentRuning		=0;		//initToggleHeatSinkonSilentRuning()	Automatic HeatSink On Silent Runing						[EL]
	
	//Joystick Master Mode Control Button
	int sCombinedFire				=0;		//Combined Fire on TG2		[OFF:0, ON:1]					[S]


//	-------------------------Match This with ED Key binding Ingame (Left if you use Unmodified ED KeyBinding File include with this script)---------------------//

	int FlightAssistGameMode		=0;		//Flight Miscellaneous / Toggle Flight Assist		[HOLD:0, TOGGLE:1]
//	int DriveAssistGameMode			=0;		//Driving / Drive Assist							[HOLD:0, TOGGLE:1]

	int HardPointsonFireGameMode	=1;		//Weapons / Firing Deploys Hardpoints 				[OFF:0, ON:1]
	int SilentRuningGameMode		=1;		//Cooling / Silent Runing							[HOLD:0, TOGGLE:1]
	
	int RFlightThrootleGameMode		=0;		//Flight Throttle / Forward Only Throttle Reverse	[HOLD:0, TOGGLE:1]
//	int RDriveThrootleGameMode		=0;		//Drive Throttle / Forward Only Throttle Reverse	[HOLD:0, TOGGLE:1]

	int ThrottleAxisRange			=0;		//Flight Throttle / Throttle Axis Range				[Forward only:0, Full Range:1]
	
	int HeadLookGameMode			=1;		//Driving Mode Switches & Mode Switches / HeadLock	[HOLD:0, TOGGLE:1]

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	AXIS CURVES																																					//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	define FAOffCurve 2						//Flight Assist OFF Default Curve : 0 or 1 or 2 -> AXIS CURVES
	
	//Set via the FLAP switch (Up is most aggresive, down is least aggressive)
	
	//Joystick			Up,M,Down
	short JS_CURVE[] = {-1, 0,  2};			//Negative values make the axis more sensitive around the center, while positive values provide better control in the center position
	short JS_ZOOM[]  = { 1, 0, -1};			//Negative value will limit the travel on the axis. Positive value will make the minimum and maximum values on the axis reached before the mechanical axis limits
	define JS_DEADZONE 1					//Set the JS Deadzone.. use the Device Analyzer to validate

	//Slew				Up,M,Down
	short SL_CURVE[] = {-1, 0,  2};			//Negative values make the axis more sensitive around the center, while positive values provide better control in the center position
	short SL_ZOOM[]  = { 1, 0, -1};			//Negative value will limit the travel on the axis. Positive value will make the minimum and maximum values on the axis reached before the mechanical axis limits
	define SL_DEADZONE 1					//Set the SL Deadzone.. use the Device Analyzer to validate
	
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	LED SETTINGS																																				//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

//	--LED On Throttle------------Put LED1, LED2, LED3, LED4 or LED5 to select wich one you want. Other should be 0 // 5 LED's MAXIMUM---------------------------//

	define ToggleOptimalPIPModeLED				LED1
	define ToggleSecureRetractLED				LED2
	define ToggleSupecruiseOnThrottleLED		LED3
	define ToggleSilentRuningOFFonFireLED		LED4
	define ToggleStopFireRetractHardpointsLED	LED5	//Retract HardPoints When Fire OFF LED
	define ToggleHardPointsonFireGameModeLED	0
	define ToggleHeatSinkonSilentRuningLED		0
	define ToggleLandingGearLED					0
	define ToggleCargoScoopLED					0
	define ToggleLightsLED						0
	define ToggleHardpointsLED					0
	define ToggleCombinedFireLED				0
	define ToggleRCorrectionLED					0
	define ToggleCameraLED						0
	define TogglePTTLED							0
	define ToggleVoicePTTLED					0
	define TogglePTTModeLED						0
	define ToggleSilentRuningLED				0
	define ToggleIDLEonThrottleLED				0		//IDLE LED Work only if ThrottleLEDOnIDLE != 0
	define ToggleFALED							0		//Flight Assist LED
	define ToggleVALED							0		//Voice Attack Mic LED
	define ToggleReverseThrottleLED				0
	define ToggleGameMenuLED					0
	define ToogleHeadLookLED					0
	define ToogleExplorerModeLED				0
//	define ToogleNVidiaCaptureVideoLED			0		//Nvidia Shadowplay Capture
//	define ToogleNVidiaStreamingLED				0		//Nvidia Shadowplay Streaming
//	define ToogleAMDCaptureVideoLED				0		//AMD Relive Capture
//	define ToogleAMDStreamingLED				0		//AMD Relive Streaming

	
		
//	--LED Backlight (Value 0-255)--------------------------------------------------------------------------------------------------------------------------//

	// 0 to 42		is OFF
	// 43 to 85		is level 1
	// 86 to 128	is level 2
	// 129 to 171	is level 3
	// 172 to 214	is level 4
	// 215 to 255	is level 5
	
	//Throttle
	define ThrottleLight 		171				//Base Throttle LED Intensity
	define ThrottleLightHMD 	85				//Base Throttle LED Intensity when HMD Use
	define ThrottleLightOnIDLE	0				//Base Throttle LED Intensity on Throttle IDLE State
	
	//MFD
	define RMFDLight			129				//Right MFD backlight
	define LMFDLight			129				//Light MFD backlight

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	PRESS & PULSE DELAY SETTINGS																																//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	//PRESS DELAY (Keys)
	define MiniPressDelay	150			//Shortest Delay 150
	define ShortPressDelay	250			//Shorter Delay 250
	define MediumPressDelay	350			//Medium Delay 350
	define LongPressDelay	500			//Long Delay 500
	define ExtraPressDelay	1500		//Longest Delay 1500
	
	//PULSE DELAY (Macro/Other)
	define MiniPulseDelay	150			//Shortest Delay 150
	define ShortPulseDelay	250			//Shorter Delay 250
	define MediumPulseDelay	350			//Medium Delay 350
	define LongPulseDelay	500			//Long Delay 500
	define ExtraPulseDelay	2000		//Longest Delay 2000

	//FSD OFF DELAY MACRO: Safe System Jump
	define FSDOFFDelay		25000		//When to Press 0 Speed Key after Engaging FSD (Safe System Jump) Delay 25000
	
	//PIP DELAY
	define PIPPressDelay	350			//PIP Press Key Delay 350
	define PIPPulseDelay	25			//PIP Pulse Delay PIP Initialisation 25 (you can up it up to 75 if needed) initPIPPower()
	
	//HeatSink On Silent Runing Deploy Delay if HeatSinkOnSilentRuning is set to [1]
	define HeatSinkonSilentRuningDelay 8000
	
	//Scan Delay (keep key pressed for ...sec) when Explorer mode is 1)
	//Ingame, Sytem Scan is 5s and other scan are 10s we put 1 more sec to be sure
	define TG1ScanDelay		6000	//ExploreModeFire 0 or 2 TG1 Delay
	define S2ScanDelay		11000	//ExploreModeFire 1 or 2 S2  Delay

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//	REPORT STATES																																				//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	int initPrintState(){	//Display the status of the macro toggles in Target Script Editor on run.
		printf("------------------------------Current States------------------------------\x0a");
		printf("		Supecruise On Throttle--------------------%d\x0a", SupecruiseOnThrottle);
		printf("		Secure Retract----------------------------%d\x0a", SecureRetract);
		printf("		Game Menu On IDLE-------------------------%d\x0a", GameMenuOnIDLE);
		printf("		Throttle Light Value On IDLE--------------%d\x0a", ThrottleLightOnIDLE);
		printf("		Optimal PIP Mode--------------------------%d\x0a", OptimalPIPMode);
		printf("		Heat Sink On SilentRuning-----------------%d\x0a", HeatSinkonSilentRuning);
		printf("		Silent Runing OFF On Fire-----------------%d\x0a", SilentRuningOFFonFire);
		printf("		Combine Pri+Sec Fire----------------------%d\x0a", sCombinedFire);
		printf("		Retract HardPoints On Fire----------------%d\x0a", StopFireRetractHardpoints);
//		printf("--------------------------------------------------------------------------\x0a");
		printf("		Rotation Correction-----------------------%d\x0a", sRCorrection);
//		printf("		Landing Gears-----------------------------%d\x0a", sGears);
//		printf("		Cargo Scoop-------------------------------%d\x0a", sCargo);
//		printf("		Ship Lights-------------------------------%d\x0a", sLights);
//		printf("		Classified CameraMode---------------------%d\x0a", sCameraMode);
//		printf("		HardPoints--------------------------------%d\x0a", sHardPoints);
//		printf("		Explorer Mode-----------------------------%d\x0a", sExplorerMode);
		printf("--------------------------In Game Settings--------------------------------\x0a");
		printf("		PPT------------------------HOLD/TOGGLE----%d\x0a", sPTTMode);
		printf("		PPT-MIC--------------------EXT./INT.------%d\x0a", sPTTState);
		printf("		Flight Assist--------------HOLD/TOGGLE----%d\x0a", FlightAssistGameMode);
//		printf("		Drive Assist---------------HOLD/TOGGLE----%d\x0a", DriveAssistGameMode);
		printf("		HardPoints on Fire---------OFF/ON---------%d\x0a", HardPointsonFireGameMode);
		printf("		R.Throttle Flight----------HOLD/TOGGLE----%d\x0a", RFlightThrootleGameMode);
//		printf("		R.Throttle Drive-----------HOLD/TOGGLE----%d\x0a", RDriveThrootleGameMode);
		printf("		Silent Runing--------------HOLD/TOGGLE----%d\x0a", SilentRuningGameMode);
		printf("		Head Look------------------HOLD/TOGGLE----%d\x0a", HeadLookGameMode);
		printf("		Flight Throttle------------FWD/FULL Range-%d\x0a", ThrottleAxisRange);
		printf("--------------------------------------------------------------------------\x0a");
	}	